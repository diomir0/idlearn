#========================================================================================#
#                                       IDLEARN                                          #
#                                        cg.py                                           #
#========================================================================================#

# Filename: cg.py
# Author: diomir0
# Date of creation: 06 Jul 2025

# This script contains the functions used to generate the Anki cards programmatically  
# using the genanki Python 3 package. The question-answer pairs generated by 
# Mistral:7B-Instruct in the pipeline are taken as argument. The function then, depending 
# on the type of question-answer pair (e.g. if the answer contains multiple relevant 
# numbers), picks between Cloze or Basic card model and generates a Note. 

import genanki
from .utils import is_quantitative_question, answer_contains_number
from app import llmmodel

class CG:
    
    def __init__(self, title, deck_id):
        self.title = title
        self.deck_id = deck_id
    
    def generate(self, q_dict, output_path):
        from .logger import logger
        # Generate a deck 
        logger.info('-- Generating Anki deck...')
        deck = genanki.Deck(
            self.deck_id,
            self.title
        )
        
        # Iterate through all sections
        for key in q_dict.keys():
            logger.info('--- Generating cards for section "{}"'.format(key))
            # Extract questions and answers on the current section 
            questions = re.findall(r"Q:\s.*?(?=\nA:|\Z)", q_dict[key], re.DOTALL)
            answers = re.findall(r"A:\s.*?(?=\n+Q:|\Z)", q_dict[key], re.DOTALL)
            # Iterate through the question/answers
            for i in range(len(answers)):
                # Check if the question requires a quantitive answer. If so, apply cloze model
                if is_quantitative_question(questions[i]) or answer_contains_number(answers[i]):
                    card = genanki.Note(
                        model = genanki.CLOZE_MODEL,
                        fields = [None, None]
                    )
                # Otherwise apply the basic model
                else: 
                    card = genanki.Note(
                        model = genanki.BASIC_MODEL,
                        fields = [questions[i][3:], answers[i][3:]]
                    )
                # Add the card to the deck
                deck.add_note(card)
    
        logger.info("-- Finished generating complete deck.")